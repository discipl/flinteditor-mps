buildscript {
    repositories {
        maven {
            url = uri("https://projects.itemis.de/nexus/content/repositories/mbeddr")
        }
        mavenCentral()
    }
    dependencies {
        classpath "de.itemis.mps:mps-gradle-plugin:$mps_gradle_plugin_version"
    }
}

plugins {
    id "org.jetbrains.intellij" version "1.2.0"
    id "com.github.node-gradle.node" version "2.2.3"
    id "java"
    id "net.ossindex.audit" version "0.4.11"
}

group 'org.discipl'
version '1.0-SNAPSHOT'

ext {
    codeDir = project("code").projectDir
    ideDir = new File(project("code").buildDir, "artifacts/FlintIdeDistribution")
    linuxIdeDir = new File(ideDir, "linux")
    libDir = new File(codeDir, "solutions/Flint.runtime/libs")
    reportsDir = new File(project("code").buildDir, "reports")
    platformLibDir = new File(rootDir, "platform-libs")
    artifactDir = new File(rootDir, "artifacts")
    mpsDir = new File(buildDir, "mps")
    resourcesDir = new File(rootDir, "static-resources")
    generatedResourcesDir = new File(resourcesDir, "generated")
    platforms = ["linux", "mac", "win"]
    current_platform = currentPlatform()
    generateTask = null

    testFileName = "TEST-jetbrains.mps.testbench.junit.suites.AntModuleTestSuite0-execution.xml"
    flint_filler_release_version = "v0.0.5"
    flint_filler_executables_dir = new File(generatedResourcesDir, "flintfiller")

    javafx_version = "14"
    mbeddr_version = "2020.3.+"
    mps_version = "2020.3.1"
    node_version = "13.6.0"
    npm_version = "6.13.4"
    koin_version = "2.2.2"
}

configurations {
    mpslib
    mpsplatformlib
    mpsGenLib
    artifact
    mps
    antLib
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url = uri("https://projects.itemis.de/nexus/content/repositories/OS/")
    }
}

dependencies {
    platforms.each { platform ->
        mpsplatformlib "org.openjfx:javafx-base:$javafx_version:$platform"
        mpsplatformlib "org.openjfx:javafx-controls:$javafx_version:$platform"
        mpsplatformlib "org.openjfx:javafx-graphics:$javafx_version:$platform"
        mpsplatformlib "org.openjfx:javafx-media:$javafx_version:$platform"
        mpsplatformlib "org.openjfx:javafx-swing:$javafx_version:$platform"
        mpsplatformlib "org.openjfx:javafx-web:$javafx_version:$platform"
    }

    mpslib(project("code:java:FlintParser")) {
        exclude group: 'org.openjfx'
    }
    mpslib(project("code:java:FlintSources")) {
        exclude group: "org.slf4j"
    }
    mpslib('com.googlecode.json-simple:json-simple:1.1.1')
    mpslib('commons-io:commons-io:2.7')
    mpslib('commons-codec:commons-codec:1.11')

    artifact "com.mbeddr:platform:$mbeddr_version"
    mps("com.jetbrains:mps:$mps_version")
    // antLib("org.apache.ant:ant-junit:1.10.10")
    antLib("org.apache.ant:ant-junit:1.10.12")

    mpsGenLib "org.openjfx:javafx-base:$javafx_version:$current_platform"
    mpsGenLib "org.openjfx:javafx-controls:$javafx_version:$current_platform"
    mpsGenLib "org.openjfx:javafx-graphics:$javafx_version:$current_platform"
    mpsGenLib "org.openjfx:javafx-media:$javafx_version:$current_platform"
    mpsGenLib "org.openjfx:javafx-swing:$javafx_version:$current_platform"
    mpsGenLib "org.openjfx:javafx-web:$javafx_version:$current_platform"
}

if (!OperatingSystem.current().isMacOsX()) {
    ext["itemis.mps.gradle.ant.defaultJavaExecutable"] = new File(mpsDir, "jbr/bin/java")
}
ext["itemis.mps.gradle.ant.defaultScriptArgs"] = ["-Dmps_home=$mpsDir.path".toString()]
ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = project.configurations.antLib.fileCollection({ true })

node {
    // Version of node to use.
    version = node_version

    // Version of npm to use.
    npmVersion = npm_version

    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}")
}

task copyProjectLibs(type: Copy) {
    subprojects.forEach { sub ->
        from {
            new File(sub.buildDir, "libs")
        }
    }
    into libDir
    rename '(.*)-[0-9]+\\..*', '$1.jar'
}

subprojects.forEach {
    copyProjectLibs.dependsOn it.getTasksByName("build", false)
}

task cleanLibs(type: Delete) {
    delete(libDir)
}

task resolveLibs(type: Copy) {
    group "dependancies"
    dependsOn cleanLibs
    from {
        configurations.mpslib.resolve()
    }
    into libDir
    finalizedBy copyProjectLibs
    rename '(.*)-[0-9]+\\..*.', '$1.jar'
}

task cleanResources(type: Delete) {
    delete fileTree(dir: "$generatedResourcesDir", exclude: "**/flintfiller/*")
}

task fetchComplianceByDesign(type: Copy) {
    dependsOn npmInstall
    from "$rootDir.path/node_modules/@discipl/compliance-by-design/build"
    into "${generatedResourcesDir.path}/compliance-by-design"
}

task fetchResources() {
    group "dependancies"
    dependsOn cleanResources
    finalizedBy fetchComplianceByDesign
    finalizedBy "fetchFlintFillerExecutables"
}

task cleanPlatformLibs(type: Delete) {
    delete(platformLibDir)
}

task resolvePlatformLibs(type: Copy) {
    group "dependancies"
    dependsOn cleanPlatformLibs
    from configurations.mpsplatformlib.resolve()
    into platformLibDir
    rename '(.*)-[0-9]+\\..*.', '$1.jar'
}

task unzipArtifacts() {
    doFirst {
        copy {
            artifactDir.eachFile {
                if (it.name.matches("(.*)\\.zip")) {
                    from zipTree(it)
                }
            }
            into artifactDir
        }
    }
}

task cleanArtifacts(type: Delete) {
    delete(artifactDir)
}

task resolveArtifacts(type: Copy) {
    group "dependancies"
    dependsOn cleanArtifacts
    from configurations.artifact.resolve().collect { zipTree(it) }
    into artifactDir
}

task cleanIdeTar(type: Delete) {
    delete(linuxIdeDir)
}

task extractIdeTar() {
    dependsOn "buildFlintIde"
    dependsOn cleanIdeTar
    doFirst {
        copy {
            from tarTree("$ideDir/Flint.tar.gz")
            into linuxIdeDir
        }
    }
}

task startFlintLinuxIde(type: Exec) {
    dependsOn(extractIdeTar)
    group "flintide"
    workingDir "$linuxIdeDir/bin"
    commandLine "./flint.sh"
}

task copyMbeddrPlugins(type: Copy) {
    dependsOn(resolveArtifacts)
    from "${artifactDir}/com.mbeddr.platform"
    into "${mpsDir}/plugins"
}


import org.gradle.internal.os.OperatingSystem

task downloadJbr(type: Copy, dependsOn: prepareSandbox) {
    def path1 = tasks.getByName("runIde").projectExecutable.get()
    def jbrDir = new File(path1, "../..")
//    if (OperatingSystem.current().isMacOsX()) {
//        jbrDir = new File(path1, "../../../..")
//    }
    from jbrDir
    into new File(mpsDir, "jbr")
}

task resolveMps(type: Copy) {
    from configurations.mps.resolve().collect { zipTree(it) }
    into mpsDir
    finalizedBy(copyMbeddrPlugins)
    finalizedBy("addFxLibs")
    finalizedBy("downloadJbr")
}

task cleanProject(type: Delete) {
    group "project"
    dependsOn(cleanResources)
    dependsOn(cleanArtifacts)
    dependsOn(cleanIdeTar)
    dependsOn(cleanLibs)
    dependsOn(cleanPlatformLibs)
    getTasksByName("clean", true).each {
        dependsOn(it)
    }
    delete(project("code").buildDir)
    delete(buildDir)
    delete("$projectDir/node_modules")
}

def currentPlatform() {
    if (OperatingSystem.current().isWindows()) {
        return platforms[2]
    }
    if (OperatingSystem.current().isMacOsX()) {
        return platforms[1]
    }
    return platforms[0]
}

task initProject() {
    group "project"
    dependsOn(resolveMps)
    dependsOn(resolveLibs)
    dependsOn(resolveArtifacts)
    dependsOn(resolvePlatformLibs)
    dependsOn(fetchResources)
}

// Build Scripts
task generateScripts(type: de.itemis.mps.gradle.RunAntScript) {
    script = file("$codeDir/mainBuild.xml")
    targets = ["generate"]
}

task buildFlint(type: de.itemis.mps.gradle.RunAntScript, dependsOn: generateScripts) {
    script = file("$codeDir/build-Flint.xml")
    targets = ["generate", "build"]
}

task buildFlintIde(type: de.itemis.mps.gradle.RunAntScript, dependsOn: buildFlint) {
    script = file("$codeDir/build-IdeDistribution.xml")
    targets = ["build"]
}

task buildFlintPlugin(type: de.itemis.mps.gradle.RunAntScript, dependsOn: buildFlint) {
    script = file("$codeDir/build-PluginDistribution.xml")
    targets = ["build"]
}

task addFxLibs(type: Copy) {
    from configurations.mpsGenLib.resolve()
    into "${mpsDir}/lib"
}

task mpsTest(type: de.itemis.mps.gradle.RunAntScript, dependsOn: generateScripts) {
    script = file("$codeDir/build-Flint.xml")
    targets = ["generate", "test"]
    test.finalizedBy("mpsTest")
    finalizedBy("htmlReport")
}

test.dependsOn("audit")

task collectXmlReports() {
    doLast {
        delete(reportsDir)
        copy {
            from {
                new File(project("code:java:FlintParser").buildDir, "test-results")
            }
            from {
                new File(project("code:java:FlintSources").buildDir, "test-results")
            }
            from {
                new File(codeDir, "$testFileName")
            }
            into "$reportsDir/sources"
        }
        delete(new File(codeDir, "$testFileName"))
    }
}

task htmlReport(type: de.itemis.mps.gradle.RunAntScript, dependsOn: collectXmlReports) {
    group "verification"
    script = file("$codeDir/html-report.xml")
}

def downloadFillerFile(name) {
    def f = new File(flint_filler_executables_dir, name)
    f.getParentFile().mkdirs();
    if (f.exists()) {
        f.delete()
    }
    new URL("https://github.com/discipl/flintfiller/releases/download/${flint_filler_release_version}/${name}").withInputStream { i -> f.withOutputStream { it << i } }
    return f
}


task fetchFlintFillerExecutables() {
    doLast {
        downloadFillerFile("flintfiller-linux")
        downloadFillerFile("flintfiller-macos")
        downloadFillerFile("flintfiller-windows.exe")
    }
}
